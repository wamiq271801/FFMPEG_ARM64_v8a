# GitHub Actions workflow to build FFmpeg for Android (arm64-v8a) and package it as an AAR.
# It uses only the official FFmpeg source, enables useful modern external libraries,
# skips very old / HTTP-specific components, and automatically accepts Android licenses.

name: Build FFmpeg Android arm64 AAR

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/ffmpeg_android_arm64.yml"

jobs:
  build-arm64:
    # Latest Ubuntu runner gives the leanest, most predictable environment and avoids
    # pre-installed Android packages that can conflict in Colab/Kaggle style images.
    runs-on: ubuntu-latest

    # These environment variables keep versions in one place for easy future upgrades.
    env:
      ANDROID_NDK_VERSION: "26.2.11394342"   # Latest stable at time of writing
      ANDROID_SDK_ROOT: "${{ github.workspace }}/android-sdk"  # Local SDK path
      ABI: arm64-v8a
      API: "29"               # Reasonable min level for 64-bit only apps
      FFMPEG_VERSION: "n6.1"  # Most recent official tag. Update as needed.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (required by Android Gradle)
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK & NDK (command-line tools only)
        uses: android-actions/setup-android@v3
        with:
          sdk-version: "commandlinetools-latest"
          ndk-version: "${{ env.ANDROID_NDK_VERSION }}"

      - name: Accept Android licenses
        run: |
          yes | "$ANDROID_HOME"/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install build dependencies (nasm, yasm, etc.)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm wget tar

      - name: Clone official FFmpeg source
        run: |
          git clone --depth 1 -b "${FFMPEG_VERSION}" https://github.com/FFmpeg/FFmpeg.git ffmpeg

      # Optionally, build modern external libraries here (libx264, libx265, etc.).
      # For brevity and speed this template leaves them out, relying on FFmpeg's
      # built-in codecs suitable for many Android use-cases. Add more libs as needed.

      - name: Generate build script
        run: |
          cat <<'EOF' > build_ffmpeg_android.sh
          #!/usr/bin/env bash
          set -euo pipefail
          LOG=build.log
          NDK_HOME="$ANDROID_NDK_HOME"
          API="${API}"
          ABI="${ABI}"
          ARCH=aarch64
          CPU=armv8-a
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
          SYSROOT="$TOOLCHAIN/sysroot"
          PREFIX="$(pwd)/android/$ABI"
          CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"
          HOST="aarch64-linux-android"

          COMMON_FLAGS="--prefix=$PREFIX \
            --disable-static --enable-shared \
            --enable-cross-compile --cross-prefix=$CROSS_PREFIX \
            --target-os=android --arch=$ARCH --cpu=$CPU \
            --sysroot=$SYSROOT --enable-neon \
            --disable-autodetect \
            --disable-doc --disable-programs --disable-symver \
            --disable-protocols --enable-protocol=file \
            --disable-network \
            --disable-avdevice --disable-outdevs --disable-devices \
            --enable-gpl --enable-version3"

          mkdir -p "$PREFIX"
          cd ffmpeg
          ./configure $COMMON_FLAGS --pkg-config=pkg-config --pkg-config-flags="--static" \
            > ../$LOG 2>&1 || { cat ../$LOG; exit 1; }
          make -j$(nproc) >> ../$LOG 2>&1 || { tail -n 200 ../$LOG; exit 1; }
          make install >> ../$LOG 2>&1 || { tail -n 200 ../$LOG; exit 1; }
          EOF
          chmod +x build_ffmpeg_android.sh

      - name: Build FFmpeg for Android
        run: ./build_ffmpeg_android.sh

      - name: Create minimal Android library wrapper (AAR)
        run: |
          mkdir -p android-aar/src/main/jniLibs/$ABI
          cp -a android/$ABI/lib/*.so android-aar/src/main/jniLibs/$ABI/

          # Create Gradle wrapper & project skeleton (offline-friendly)
          gradle_version=8.6
          curl -sLo gradle.zip "https://services.gradle.org/distributions/gradle-${gradle_version}-bin.zip"
          unzip -q gradle.zip
          mv "gradle-${gradle_version}" gradle-wrapper
          export PATH="$PWD/gradle-wrapper/bin:$PATH"
          gradle-wrapper/bin/gradle wrapper --gradle-version "${gradle_version}" --no-daemon

          cat <<'GRADLE' > android-aar/build.gradle
          plugins { id 'com.android.library' }
          android {
              compileSdk 34
              ndkVersion "${ANDROID_NDK_VERSION}"
              defaultConfig {
                  minSdk 21
                  targetSdk 34
              }
              sourceSets {
                  main { jniLibs.srcDirs = ['src/main/jniLibs'] }
              }
              publishing { singleVariant("release") { withSourcesJar() } }
          }
          GRADLE

          cat <<'ROOT' > settings.gradle
          rootProject.name = 'ffmpeg-android-aar'
          include ':android-aar'
          ROOT

          cat <<'PROPS' > gradle.properties
          android.useAndroidX=true
          android.enableJetifier=true
          PROPS

          ./gradlew :android-aar:assembleRelease --no-daemon --warning-mode all

      - name: Upload built AAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-android-arm64
          path: android-aar/build/outputs/aar/*-release.aar

      - name: Summarize build outcome
        if: always()
        run: |
          echo "### FFmpeg Android Build Result" >> "$GITHUB_STEP_SUMMARY"
          if [ "${{ job.status }}" = "success" ]; then
            echo "Build **succeeded** :white_check_mark:" >> "$GITHUB_STEP_SUMMARY"
            echo "The generated AAR is available as an artifact named **ffmpeg-android-arm64**." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Build **failed** :x:" >> "$GITHUB_STEP_SUMMARY"
            echo -e "\nLast 100 lines of build log:\n" >> "$GITHUB_STEP_SUMMARY"
            tail -n 100 build.log >> "$GITHUB_STEP_SUMMARY" || true
          fi
