name: Build FFmpeg Android AAR (arm64-v8a only)

on:
  workflow_dispatch:
    inputs:
      enable_gpl:
        description: 'Enable GPL libraries (requires GPL license acceptance)'
        required: false
        default: 'false'
        type: boolean
      debug_build:
        description: 'Enable debug build with verbose logging'
        required: false
        default: 'false'
        type: boolean

env:
  ANDROID_NDK_VERSION: '26.1.10909125'
  ANDROID_API_LEVEL: '24'
  TARGET_ABI: 'arm64-v8a'
  FFMPEG_VERSION: 'master'

jobs:
  build-ffmpeg-aar:
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Environment Variables
      run: |
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$HOME/android-sdk/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
        echo "PATH=$HOME/android-sdk/platform-tools:$HOME/android-sdk/tools:$PATH" >> $GITHUB_ENV
        echo "TOOLCHAIN=$HOME/android-sdk/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          git \
          wget \
          unzip \
          python3 \
          python3-pip \
          openjdk-17-jdk

    - name: Setup Android SDK and NDK
      run: |
        # Download and install Android SDK
        mkdir -p $ANDROID_HOME
        cd $HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip -q commandlinetools-linux-11076708_latest.zip
        mkdir -p $ANDROID_HOME/cmdline-tools/latest
        mv cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/
        
        # Accept licenses and install NDK
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;${{ env.ANDROID_NDK_VERSION }}"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        
        # Verify NDK installation
        ls -la $ANDROID_NDK_HOME/

    - name: Clone Official FFmpeg Repository
      run: |
        # Clone latest FFmpeg from official repository[3]
        git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git ffmpeg-source
        cd ffmpeg-source
        echo "FFmpeg version: $(git describe --tags)"

    - name: Download and Build External Libraries
      run: |
        # Create build directories
        mkdir -p external-libs/src external-libs/build external-libs/install
        cd external-libs/src
        
        # Set cross-compilation environment
        export CC="$TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang"
        export CXX="$TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang++"
        export AR="$TOOLCHAIN/bin/llvm-ar"
        export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
        export STRIP="$TOOLCHAIN/bin/llvm-strip"
        export SYSROOT="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        
        # Build modern, useful external libraries for Android[12]
        
        # 1. libx264 (H.264 encoder) - Essential for video encoding
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure \
          --host=aarch64-linux-android \
          --cross-prefix="$TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-" \
          --sysroot="$SYSROOT" \
          --prefix="../install" \
          --enable-static \
          --enable-pic \
          --disable-asm
        make -j$(nproc) && make install
        cd ..
        
        # 2. libx265 (H.265 encoder) - Modern video codec
        git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git
        cd x265_git/build/linux
        cmake ../../source \
          -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI="${{ env.TARGET_ABI }}" \
          -DANDROID_PLATFORM="android-${{ env.ANDROID_API_LEVEL }}" \
          -DCMAKE_INSTALL_PREFIX="../../install" \
          -DENABLE_SHARED=OFF \
          -DENABLE_PIC=ON
        make -j$(nproc) && make install
        cd ../../..
        
        # 3. libopus - Modern audio codec for streaming[12]
        git clone --depth 1 https://gitlab.xiph.org/xiph/opus.git
        cd opus
        ./autogen.sh
        ./configure \
          --host=aarch64-linux-android \
          --prefix="../install" \
          --enable-static \
          --disable-shared \
          --disable-doc \
          --disable-extra-programs
        make -j$(nproc) && make install
        cd ..
        
        # 4. libvpx - VP8/VP9 codec for web streaming
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        ./configure \
          --target=arm64-android-gcc \
          --prefix="../install" \
          --disable-examples \
          --disable-docs \
          --enable-pic \
          --enable-static \
          --disable-shared
        make -j$(nproc) && make install
        cd ..
        
        # 5. libaom - AV1 codec (modern, royalty-free)
        git clone --depth 1 https://aomedia.googlesource.com/aom
        cd aom
        mkdir build && cd build
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI="${{ env.TARGET_ABI }}" \
          -DANDROID_PLATFORM="android-${{ env.ANDROID_API_LEVEL }}" \
          -DCMAKE_INSTALL_PREFIX="../../install" \
          -DENABLE_SHARED=OFF \
          -DENABLE_DOCS=OFF \
          -DENABLE_EXAMPLES=OFF \
          -DENABLE_TESTS=OFF
        make -j$(nproc) && make install
        cd ../..

    - name: Build Error Summary Function
      run: |
        # Create intelligent error summarization script
        cat > analyze_build_error.py << 'EOF'
        #!/usr/bin/env python3
        import sys
        import re
        
        def analyze_error(log_content):
            """Analyze build errors and provide intelligent summary"""
            
            common_issues = {
                'license': {
                    'patterns': [r'license.*incompatible', r'gpl.*lgpl.*conflict', r'enable-gpl.*required'],
                    'solution': 'License conflict detected. Use --enable-gpl flag or remove GPL-licensed components.'
                },
                'ndk': {
                    'patterns': [r'ndk.*not found', r'toolchain.*missing', r'android.*api.*not supported'],
                    'solution': 'NDK configuration issue. Verify NDK path and API level compatibility.'
                },
                'missing_lib': {
                    'patterns': [r'library.*not found', r'-l\w+.*not found', r'undefined reference'],
                    'solution': 'Missing dependency. Ensure all external libraries are built and linked correctly.'
                },
                'abi': {
                    'patterns': [r'abi.*not supported', r'architecture.*mismatch'],
                    'solution': 'ABI mismatch. Verify target architecture matches build configuration.'
                },
                'cmake': {
                    'patterns': [r'cmake.*error', r'could not find.*cmake'],
                    'solution': 'CMake configuration error. Check CMake version and toolchain file.'
                }
            }
            
            issues_found = []
            for issue_type, config in common_issues.items():
                for pattern in config['patterns']:
                    if re.search(pattern, log_content, re.IGNORECASE):
                        issues_found.append({
                            'type': issue_type,
                            'solution': config['solution']
                        })
                        break
            
            return issues_found
        
        if __name__ == "__main__":
            if len(sys.argv) > 1:
                with open(sys.argv[1], 'r') as f:
                    content = f.read()
            else:
                content = sys.stdin.read()
            
            issues = analyze_error(content)
            if issues:
                print("\nüîç BUILD ERROR ANALYSIS:")
                print("=" * 50)
                for i, issue in enumerate(issues, 1):
                    print(f"{i}. Issue Type: {issue['type'].upper()}")
                    print(f"   Solution: {issue['solution']}")
                    print()
            else:
                print("No common issues detected. Check full log for details.")
        EOF
        chmod +x analyze_build_error.py

    - name: Configure FFmpeg Build
      run: |
        cd ffmpeg-source
        
        # License handling logic[14]
        LICENSE_FLAGS=""
        if [ "${{ github.event.inputs.enable_gpl }}" = "true" ]; then
          LICENSE_FLAGS="--enable-gpl --enable-version3"
          echo "‚ö†Ô∏è  GPL license enabled. Your application will be subject to GPL v3.0 licensing terms."
        else
          LICENSE_FLAGS="--enable-version3"
          echo "‚ÑπÔ∏è  Using LGPL licensing (commercial-friendly)"
        fi
        
        # Debug flags
        DEBUG_FLAGS=""
        if [ "${{ github.event.inputs.debug_build }}" = "true" ]; then
          DEBUG_FLAGS="--enable-debug --disable-optimizations --disable-stripping"
        else
          DEBUG_FLAGS="--disable-debug --enable-optimizations --enable-stripping"
        fi
        
        # Set cross-compilation environment[18]
        export CC="$TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang"
        export CXX="$TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang++"
        export AR="$TOOLCHAIN/bin/llvm-ar"
        export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
        export STRIP="$TOOLCHAIN/bin/llvm-strip"
        export PKG_CONFIG_PATH="../external-libs/install/lib/pkgconfig"
        
        # Configure FFmpeg with modern libraries and Android optimizations
        ./configure \
          --prefix=../ffmpeg-install \
          --target-os=android \
          --arch=aarch64 \
          --cpu=armv8-a \
          --cross-prefix="$TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-" \
          --sysroot="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot" \
          --extra-cflags="-I../external-libs/install/include -fPIC" \
          --extra-ldflags="-L../external-libs/install/lib" \
          $LICENSE_FLAGS \
          $DEBUG_FLAGS \
          --enable-cross-compile \
          --enable-shared \
          --disable-static \
          --disable-doc \
          --disable-programs \
          --enable-pic \
          --enable-jni \
          --enable-mediacodec \
          --enable-decoder=h264_mediacodec \
          --enable-decoder=hevc_mediacodec \
          --enable-decoder=mpeg4_mediacodec \
          --enable-decoder=vp8_mediacodec \
          --enable-decoder=vp9_mediacodec \
          --enable-hwaccel=h264_mediacodec \
          --enable-hwaccel=hevc_mediacodec \
          --enable-hwaccel=mpeg4_mediacodec \
          --enable-hwaccel=vp8_mediacodec \
          --enable-hwaccel=vp9_mediacodec \
          --enable-encoder=aac \
          --enable-encoder=libx264 \
          --enable-encoder=libx265 \
          --enable-encoder=libopus \
          --enable-encoder=libvpx_vp8 \
          --enable-encoder=libvpx_vp9 \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libopus \
          --enable-libvpx \
          --enable-libaom \
          --enable-network \
          --enable-protocol=http \
          --enable-protocol=https \
          --enable-protocol=hls \
          --enable-protocol=dash \
          --enable-protocol=rtmp \
          --enable-protocol=rtmps \
          --enable-protocol=tcp \
          --enable-protocol=udp \
          --enable-demuxer=hls \
          --enable-demuxer=dash \
          --enable-demuxer=mov \
          --enable-demuxer=mp4 \
          --enable-demuxer=flv \
          --enable-muxer=mp4 \
          --enable-muxer=hls \
          --enable-muxer=dash \
          --enable-muxer=flv \
          --disable-everything \
          --disable-autodetect \
          --disable-iconv \
          --disable-securetransport \
          --disable-xlib \
          --disable-zlib \
          --disable-bzlib \
          --disable-lzma \
          --disable-indevs \
          --disable-outdevs \
          --disable-devices \
          --disable-filters \
          --enable-filter=scale \
          --enable-filter=crop \
          --enable-filter=rotate \
          --enable-filter=hflip \
          --enable-filter=vflip \
          --enable-filter=transpose \
          --enable-filter=volume \
          --enable-filter=aresample \
          --enable-filter=format \
          --enable-filter=aformat \
          --enable-small || (echo "Configuration failed" && cat ffbuild/config.log | python3 ../analyze_build_error.py && exit 1)

    - name: Build FFmpeg Libraries
      run: |
        cd ffmpeg-source
        
        # Build with error analysis
        if ! make -j$(nproc) 2>&1 | tee build.log; then
          echo "‚ùå Build failed. Analyzing errors..."
          cat build.log | python3 ../analyze_build_error.py
          exit 1
        fi
        
        make install
        echo "‚úÖ FFmpeg build completed successfully"

    - name: Create Android AAR Project
      run: |
        # Create Android library project structure
        mkdir -p android-ffmpeg-aar
        cd android-ffmpeg-aar
        
        # Create gradle project structure
        mkdir -p src/main/{java,cpp,res,assets}
        mkdir -p src/main/java/com/ffmpeg/android
        
        # Create build.gradle for library
        cat > build.gradle << 'EOF'
        plugins {
            id 'com.android.library'
        }
        
        android {
            namespace 'com.ffmpeg.android'
            compileSdk 34
            
            defaultConfig {
                minSdk 24
                targetSdk 34
                
                ndk {
                    abiFilters 'arm64-v8a'  // Only target arm64-v8a[7][11]
                }
                
                externalNativeBuild {
                    cmake {
                        cppFlags '-std=c++17'
                        arguments '-DANDROID_STL=c++_shared'
                    }
                }
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            externalNativeBuild {
                cmake {
                    path file('src/main/cpp/CMakeLists.txt')
                    version '3.22.1'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            
            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libffmpeg.so'
            }
        }
        
        dependencies {
            implementation 'androidx.annotation:annotation:1.7.1'
        }
        EOF
        
        # Create settings.gradle
        cat > settings.gradle << 'EOF'
        rootProject.name = "ffmpeg-android-aar"
        include ':ffmpeg-library'
        project(':ffmpeg-library').projectDir = file('.')
        EOF
        
        # Create gradle wrapper properties
        mkdir -p gradle/wrapper
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF

    - name: Create FFmpeg JNI Wrapper
      run: |
        cd android-ffmpeg-aar
        
        # Create Java wrapper class
        cat > src/main/java/com/ffmpeg/android/FFmpegKit.java << 'EOF'
        package com.ffmpeg.android;
        
        import androidx.annotation.NonNull;
        import androidx.annotation.Nullable;
        
        public class FFmpegKit {
            static {
                System.loadLibrary("ffmpeg-jni");
            }
            
            /**
             * Execute FFmpeg command
             * @param command FFmpeg command string
             * @return Execution result code
             */
            public static native int execute(@NonNull String command);
            
            /**
             * Get FFmpeg version information
             * @return Version string
             */
            public static native String getVersion();
            
            /**
             * Cancel ongoing FFmpeg execution
             */
            public static native void cancel();
            
            /**
             * Get available codecs
             * @return Codec information
             */
            public static native String getCodecs();
            
            /**
             * Get available formats
             * @return Format information  
             */
            public static native String getFormats();
        }
        EOF
        
        # Create CMakeLists.txt
        cat > src/main/cpp/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.22.1)
        project("ffmpeg-jni")
        
        # Set target architecture to arm64-v8a only[7]
        set(CMAKE_ANDROID_ARCH_ABI arm64-v8a)
        
        # Import prebuilt FFmpeg libraries
        set(FFMPEG_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/../../../ffmpeg-install)
        
        add_library(avutil SHARED IMPORTED)
        set_target_properties(avutil PROPERTIES IMPORTED_LOCATION ${FFMPEG_ROOT}/lib/libavutil.so)
        
        add_library(avcodec SHARED IMPORTED)
        set_target_properties(avcodec PROPERTIES IMPORTED_LOCATION ${FFMPEG_ROOT}/lib/libavcodec.so)
        
        add_library(avformat SHARED IMPORTED)
        set_target_properties(avformat PROPERTIES IMPORTED_LOCATION ${FFMPEG_ROOT}/lib/libavformat.so)
        
        add_library(avfilter SHARED IMPORTED)
        set_target_properties(avfilter PROPERTIES IMPORTED_LOCATION ${FFMPEG_ROOT}/lib/libavfilter.so)
        
        add_library(swresample SHARED IMPORTED)
        set_target_properties(swresample PROPERTIES IMPORTED_LOCATION ${FFMPEG_ROOT}/lib/libswresample.so)
        
        add_library(swscale SHARED IMPORTED)
        set_target_properties(swscale PROPERTIES IMPORTED_LOCATION ${FFMPEG_ROOT}/lib/libswscale.so)
        
        # Create JNI wrapper library
        add_library(ffmpeg-jni SHARED ffmpeg_jni.cpp)
        
        target_include_directories(ffmpeg-jni PRIVATE ${FFMPEG_ROOT}/include)
        
        target_link_libraries(ffmpeg-jni
            android
            log
            avformat
            avcodec
            avutil
            avfilter
            swresample
            swscale
        )
        EOF
        
        # Create JNI implementation
        cat > src/main/cpp/ffmpeg_jni.cpp << 'EOF'
        #include <jni.h>
        #include <android/log.h>
        #include <string>
        #include <thread>
        #include <atomic>
        
        extern "C" {
        #include <libavformat/avformat.h>
        #include <libavcodec/avcodec.h>
        #include <libavutil/avutil.h>
        }
        
        #define LOG_TAG "FFmpegJNI"
        #define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
        #define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
        
        static std::atomic<bool> cancel_requested{false};
        
        extern "C" JNIEXPORT jint JNICALL
        Java_com_ffmpeg_android_FFmpegKit_execute(JNIEnv *env, jclass clazz, jstring command) {
            const char *cmd = env->GetStringUTFChars(command, 0);
            LOGI("Executing FFmpeg command: %s", cmd);
            
            // Reset cancel flag
            cancel_requested = false;
            
            // Parse command into argc/argv format
            // Simplified implementation - in production, use proper argument parsing
            int ret = 0; // Placeholder for actual FFmpeg execution
            
            env->ReleaseStringUTFChars(command, cmd);
            return ret;
        }
        
        extern "C" JNIEXPORT jstring JNICALL
        Java_com_ffmpeg_android_FFmpegKit_getVersion(JNIEnv *env, jclass clazz) {
            return env->NewStringUTF(av_version_info());
        }
        
        extern "C" JNIEXPORT void JNICALL
        Java_com_ffmpeg_android_FFmpegKit_cancel(JNIEnv *env, jclass clazz) {
            cancel_requested = true;
            LOGI("FFmpeg execution cancellation requested");
        }
        
        extern "C" JNIEXPORT jstring JNICALL
        Java_com_ffmpeg_android_FFmpegKit_getCodecs(JNIEnv *env, jclass clazz) {
            return env->NewStringUTF("Codec information placeholder");
        }
        
        extern "C" JNIEXPORT jstring JNICALL
        Java_com_ffmpeg_android_FFmpegKit_getFormats(JNIEnv *env, jclass clazz) {
            return env->NewStringUTF("Format information placeholder");
        }
        EOF

    - name: Copy FFmpeg Libraries and Build AAR
      run: |
        cd android-ffmpeg-aar
        
        # Copy FFmpeg libraries to jniLibs
        mkdir -p src/main/jniLibs/arm64-v8a
        cp ../ffmpeg-install/lib/*.so src/main/jniLibs/arm64-v8a/
        
        # Copy external library dependencies
        cp ../external-libs/install/lib/*.so src/main/jniLibs/arm64-v8a/ 2>/dev/null || true
        
        # Download Gradle wrapper
        wget -q https://services.gradle.org/distributions/gradle-8.4-bin.zip
        unzip -q gradle-8.4-bin.zip
        
        # Set Gradle wrapper executable
        chmod +x gradle-8.4/bin/gradle
        
        # Build AAR with error handling
        if ! ./gradle-8.4/bin/gradle assembleRelease 2>&1 | tee build.log; then
          echo "‚ùå AAR build failed. Analyzing errors..."
          cat build.log | python3 ../analyze_build_error.py
          exit 1
        fi
        
        echo "‚úÖ AAR build completed successfully"
        
        # Verify AAR was created
        if [ -f "build/outputs/aar/ffmpeg-library-release.aar" ]; then
          echo "‚úÖ AAR file created: $(ls -lh build/outputs/aar/ffmpeg-library-release.aar)"
        else
          echo "‚ùå AAR file not found"
          exit 1
        fi

    - name: Generate Build Summary
      run: |
        echo "üéâ BUILD SUMMARY"
        echo "==============="
        echo "Target ABI: ${{ env.TARGET_ABI }}"
        echo "Android API Level: ${{ env.ANDROID_API_LEVEL }}"
        echo "License Mode: $([ '${{ github.event.inputs.enable_gpl }}' = 'true' ] && echo 'GPL v3.0' || echo 'LGPL v3.0')"
        echo "Debug Build: ${{ github.event.inputs.debug_build }}"
        echo ""
        echo "üì¶ Built Libraries:"
        find ffmpeg-install/lib -name "*.so" -exec basename {} \; | sort
        echo ""
        echo "üì± AAR Details:"
        cd android-ffmpeg-aar
        ls -lh build/outputs/aar/*.aar
        echo ""
        echo "‚ö†Ô∏è  Important Notes:"
        echo "- This AAR only supports arm64-v8a architecture"
        echo "- Ensure your app's minSdk is at least ${{ env.ANDROID_API_LEVEL }}"
        if [ "${{ github.event.inputs.enable_gpl }}" = "true" ]; then
          echo "- GPL license: Your app must comply with GPL v3.0 licensing terms"
        else
          echo "- LGPL license: Commercial use allowed with proper attribution"
        fi

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-android-aar-${{ env.TARGET_ABI }}
        path: |
          android-ffmpeg-aar/build/outputs/aar/*.aar
          ffmpeg-install/lib/*.so
          build.log
        retention-days: 30

    - name: Create Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: FFmpeg Android AAR ${{ github.ref }}
        body: |
          ## FFmpeg Android AAR Build
          
          **Target Architecture:** arm64-v8a only
          **Android API Level:** ${{ env.ANDROID_API_LEVEL }}+
          **License:** $([ '${{ github.event.inputs.enable_gpl }}' = 'true' ] && echo 'GPL v3.0' || echo 'LGPL v3.0')
          
          ### Features
          - Hardware acceleration support (MediaCodec)
          - Modern codecs: H.264, H.265, VP8, VP9, AV1, Opus
          - Network protocols: HTTP(S), HLS, DASH, RTMP
          - Optimized for 64-bit ARM Android devices
          
          ### Usage
          Add to your `build.gradle`:
          ```
          android {
              defaultConfig {
                  ndk {
                      abiFilters 'arm64-v8a'
                  }
              }
          }
          ```
        draft: false
        prerelease: false
