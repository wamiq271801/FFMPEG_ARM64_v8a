name: Build FFmpeg Android ARM64 AAR

on:
  workflow_dispatch:
    inputs:
      ffmpeg_version:
        description: 'FFmpeg version (latest, n6.1, n7.0, etc.)'
        required: false
        default: 'latest'
      build_type:
        description: 'Build type'
        required: false
        default: 'release'
        type: choice
        options:
        - release
        - debug
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/**'
      - 'build-scripts/**'

env:
  ANDROID_API_LEVEL: 21
  ANDROID_NDK_VERSION: 26.1.10909125
  TARGET_ARCH: arm64-v8a
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'release' }}
  FFMPEG_VERSION: ${{ github.event.inputs.ffmpeg_version || 'latest' }}

jobs:
  build-ffmpeg-android:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    
    strategy:
      fail-fast: false
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Environment Information
      id: setup-info
      run: |
        echo "build-date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "runner-os=${{ runner.os }}" >> $GITHUB_OUTPUT
        echo "arch=$(uname -m)" >> $GITHUB_OUTPUT
        echo "cores=$(nproc)" >> $GITHUB_OUTPUT
        
    - name: System Information & Cleanup
      run: |
        echo "=== System Information ==="
        uname -a
        echo "Available CPU cores: $(nproc)"
        echo "Available memory: $(free -h)"
        echo "Available disk space:"
        df -h
        
        # Clean up pre-installed packages that might conflict
        echo "=== Cleaning potential conflicts ==="
        sudo apt-get remove -y --purge \
          ffmpeg libavcodec* libavformat* libavutil* libswscale* \
          x264 libx264* opus-tools libopus* \
          2>/dev/null || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean

    - name: Install System Dependencies
      run: |
        echo "=== Installing system dependencies ==="
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          git \
          wget \
          curl \
          unzip \
          autoconf \
          automake \
          libtool \
          nasm \
          yasm \
          python3 \
          python3-pip \
          openjdk-17-jdk \
          ca-certificates \
          gnupg \
          lsb-release
          
        # Install modern build tools
        pip3 install --upgrade pip setuptools wheel

    - name: Setup Android NDK
      id: setup-ndk
      run: |
        echo "=== Setting up Android NDK ${{ env.ANDROID_NDK_VERSION }} ==="
        export NDK_VERSION=${{ env.ANDROID_NDK_VERSION }}
        
        # Download and setup Android NDK
        cd $HOME
        wget -q https://dl.google.com/android/repository/android-ndk-r26c-linux.zip
        unzip -q android-ndk-r26c-linux.zip
        
        export ANDROID_NDK_ROOT=$HOME/android-ndk-r26c
        export ANDROID_NDK=$ANDROID_NDK_ROOT
        
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
        
        # Verify NDK installation
        ls -la $ANDROID_NDK_ROOT
        echo "NDK version: $($ANDROID_NDK_ROOT/ndk-build --version)"

    - name: Setup Build Environment
      id: setup-build
      run: |
        echo "=== Setting up build environment ==="
        
        # Create build directories
        mkdir -p $HOME/ffmpeg-build/{src,build,prefix,logs}
        export BUILD_ROOT=$HOME/ffmpeg-build
        export PREFIX_ROOT=$BUILD_ROOT/prefix
        export SRC_ROOT=$BUILD_ROOT/src
        export BUILD_DIR=$BUILD_ROOT/build
        export LOG_DIR=$BUILD_ROOT/logs
        
        echo "BUILD_ROOT=$BUILD_ROOT" >> $GITHUB_ENV
        echo "PREFIX_ROOT=$PREFIX_ROOT" >> $GITHUB_ENV
        echo "SRC_ROOT=$SRC_ROOT" >> $GITHUB_ENV
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "LOG_DIR=$LOG_DIR" >> $GITHUB_ENV
        
        # Setup Android toolchain variables
        export TARGET_HOST=aarch64-linux-android
        export API=${{ env.ANDROID_API_LEVEL }}
        export AR=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
        export CC=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/${TARGET_HOST}${API}-clang
        export AS=$CC
        export CXX=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/${TARGET_HOST}${API}-clang++
        export LD=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/ld
        export RANLIB=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib
        export STRIP=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip
        export NM=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm
        
        echo "TARGET_HOST=$TARGET_HOST" >> $GITHUB_ENV
        echo "AR=$AR" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "AS=$AS" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "LD=$LD" >> $GITHUB_ENV
        echo "RANLIB=$RANLIB" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV
        echo "NM=$NM" >> $GITHUB_ENV
        
        # Common flags
        export CFLAGS="-O3 -fPIC -DANDROID -D__ANDROID_API__=${API} -fstack-protector-strong"
        export CXXFLAGS="$CFLAGS -std=c++17"
        export LDFLAGS="-L$PREFIX_ROOT/lib"
        export PKG_CONFIG_PATH="$PREFIX_ROOT/lib/pkgconfig"
        
        echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
        echo "CXXFLAGS=$CXXFLAGS" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Build libx264
      id: build-x264
      run: |
        echo "=== Building libx264 ==="
        cd $SRC_ROOT
        
        # Clone latest x264
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        
        ./configure \
          --prefix=$PREFIX_ROOT \
          --host=$TARGET_HOST \
          --cross-prefix=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/${TARGET_HOST}${{ env.ANDROID_API_LEVEL }}- \
          --sysroot=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
          --extra-cflags="$CFLAGS" \
          --extra-ldflags="$LDFLAGS" \
          --enable-static \
          --enable-pic \
          --disable-shared \
          --disable-cli \
          --disable-asm \
          2>&1 | tee $LOG_DIR/x264-configure.log
          
        make -j$(nproc) 2>&1 | tee $LOG_DIR/x264-build.log
        make install 2>&1 | tee $LOG_DIR/x264-install.log
        
        echo "x264 build completed"

    - name: Build libopus
      id: build-opus
      run: |
        echo "=== Building libopus ==="
        cd $SRC_ROOT
        
        # Clone latest opus
        git clone --depth 1 https://github.com/xiph/opus.git
        cd opus
        
        ./autogen.sh
        ./configure \
          --prefix=$PREFIX_ROOT \
          --host=$TARGET_HOST \
          --disable-shared \
          --enable-static \
          --disable-doc \
          --disable-extra-programs \
          --enable-float-approx \
          CFLAGS="$CFLAGS" \
          LDFLAGS="$LDFLAGS" \
          2>&1 | tee $LOG_DIR/opus-configure.log
          
        make -j$(nproc) 2>&1 | tee $LOG_DIR/opus-build.log
        make install 2>&1 | tee $LOG_DIR/opus-install.log
        
        echo "opus build completed"

    - name: Build libvpx
      id: build-vpx
      run: |
        echo "=== Building libvpx ==="
        cd $SRC_ROOT
        
        # Clone latest libvpx
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        
        ./configure \
          --prefix=$PREFIX_ROOT \
          --target=arm64-android-gcc \
          --sdk-path=$ANDROID_NDK \
          --disable-examples \
          --disable-unit-tests \
          --enable-vp8 \
          --enable-vp9 \
          --enable-pic \
          --disable-shared \
          --as=yasm \
          --extra-cflags="$CFLAGS" \
          --extra-cxxflags="$CXXFLAGS" \
          2>&1 | tee $LOG_DIR/vpx-configure.log
          
        make -j$(nproc) 2>&1 | tee $LOG_DIR/vpx-build.log
        make install 2>&1 | tee $LOG_DIR/vpx-install.log
        
        echo "libvpx build completed"

    - name: Build libmp3lame
      id: build-lame
      run: |
        echo "=== Building libmp3lame ==="
        cd $SRC_ROOT
        
        # Download latest lame source
        wget -q https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
        tar xzf lame-3.100.tar.gz
        cd lame-3.100
        
        ./configure \
          --prefix=$PREFIX_ROOT \
          --host=$TARGET_HOST \
          --disable-shared \
          --enable-static \
          --disable-frontend \
          --enable-nasm \
          CFLAGS="$CFLAGS" \
          LDFLAGS="$LDFLAGS" \
          2>&1 | tee $LOG_DIR/lame-configure.log
          
        make -j$(nproc) 2>&1 | tee $LOG_DIR/lame-build.log
        make install 2>&1 | tee $LOG_DIR/lame-install.log
        
        echo "libmp3lame build completed"

    - name: Clone FFmpeg Official Repository
      id: clone-ffmpeg
      run: |
        echo "=== Cloning FFmpeg official repository ==="
        cd $SRC_ROOT
        
        if [ "${{ env.FFMPEG_VERSION }}" == "latest" ]; then
          git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git
        else
          git clone --depth 1 --branch ${{ env.FFMPEG_VERSION }} https://git.ffmpeg.org/ffmpeg.git
        fi
        
        cd ffmpeg
        echo "FFmpeg version: $(git describe --tags 2>/dev/null || echo 'master')"
        
        # Store FFmpeg version info
        FFMPEG_HASH=$(git rev-parse HEAD)
        echo "FFMPEG_HASH=$FFMPEG_HASH" >> $GITHUB_ENV

    - name: Configure FFmpeg
      id: configure-ffmpeg
      run: |
        echo "=== Configuring FFmpeg ==="
        cd $SRC_ROOT/ffmpeg
        
        # License acceptance strategy - use permissive configuration first
        CONFIGURE_ARGS="--prefix=$PREFIX_ROOT"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-cross-compile"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --target-os=android"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --arch=aarch64"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --cpu=cortex-a53"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --cross-prefix=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --sysroot=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --extra-cflags=\"$CFLAGS\""
        CONFIGURE_ARGS="$CONFIGURE_ARGS --extra-ldflags=\"$LDFLAGS\""
        CONFIGURE_ARGS="$CONFIGURE_ARGS --extra-libs=\"-L$PREFIX_ROOT/lib\""
        CONFIGURE_ARGS="$CONFIGURE_ARGS --pkg-config-flags=\"--static\""
        
        # Enable static libraries and disable shared
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-static --disable-shared"
        
        # Enable external libraries (modern Android-relevant ones)
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libx264"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libopus"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libvpx"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-libmp3lame"
        
        # Enable useful codecs and formats for Android
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=libx264"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=libopus"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=libvpx_vp8"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=libvpx_vp9"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=libmp3lame"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=aac"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-encoder=h264_mediacodec"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-decoder=h264_mediacodec"
        
        # Enable protocols useful for Android
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-protocol=file"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-protocol=http"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-protocol=https"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-protocol=hls"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-protocol=dash"
        
        # Disable unnecessary components to reduce size
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-programs"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-doc"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-debug"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-avdevice"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-postproc"
        
        # Disable old/unnecessary codecs and features
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-decoder=snow"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-encoder=snow"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-decoder=dfa"
        CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-decoder=dsicinvideo"
        
        # First try without GPL to avoid license conflicts
        echo "=== Attempting configure without GPL ==="
        eval ./configure $CONFIGURE_ARGS 2>&1 | tee $LOG_DIR/ffmpeg-configure-first.log
        
        if [ $? -ne 0 ]; then
          echo "=== First configure failed, trying with GPL ==="
          # If that fails, try with GPL (user must accept licensing)
          CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-gpl"
          eval ./configure $CONFIGURE_ARGS 2>&1 | tee $LOG_DIR/ffmpeg-configure-gpl.log
          
          if [ $? -ne 0 ]; then
            echo "=== GPL configure also failed, trying minimal build ==="
            # Last resort: minimal build
            ./configure \
              --prefix=$PREFIX_ROOT \
              --enable-cross-compile \
              --target-os=android \
              --arch=aarch64 \
              --cross-prefix=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}- \
              --sysroot=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
              --extra-cflags="$CFLAGS" \
              --extra-ldflags="$LDFLAGS" \
              --enable-static \
              --disable-shared \
              --disable-programs \
              --disable-doc \
              2>&1 | tee $LOG_DIR/ffmpeg-configure-minimal.log
          fi
        fi
        
        echo "FFmpeg configuration completed"

    - name: Build FFmpeg
      id: build-ffmpeg
      run: |
        echo "=== Building FFmpeg ==="
        cd $SRC_ROOT/ffmpeg
        
        make clean 2>/dev/null || true
        make -j$(nproc) 2>&1 | tee $LOG_DIR/ffmpeg-build.log
        
        if [ $? -ne 0 ]; then
          echo "=== Build failed, checking logs ==="
          tail -50 $LOG_DIR/ffmpeg-build.log
          exit 1
        fi
        
        make install 2>&1 | tee $LOG_DIR/ffmpeg-install.log
        echo "FFmpeg build completed successfully"

    - name: Create Android AAR Structure
      id: create-aar
      run: |
        echo "=== Creating Android AAR structure ==="
        
        # Create AAR directory structure
        mkdir -p $BUILD_DIR/aar/{jni/arm64-v8a,res,assets}
        mkdir -p $BUILD_DIR/aar/META-INF
        
        # Copy built libraries
        cp $PREFIX_ROOT/lib/*.a $BUILD_DIR/aar/jni/arm64-v8a/ 2>/dev/null || true
        cp $PREFIX_ROOT/lib/*.so $BUILD_DIR/aar/jni/arm64-v8a/ 2>/dev/null || true
        
        # Create AndroidManifest.xml for AAR
        cat > $BUILD_DIR/aar/AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.ffmpeg.android"
    android:versionCode="1"
    android:versionName="1.0">
    
    <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34" />
</manifest>
EOF

        # Create classes.jar (empty but required for AAR)
        mkdir -p $BUILD_DIR/temp/classes
        echo "public class FFmpegNative {}" > $BUILD_DIR/temp/classes/FFmpegNative.java
        javac -d $BUILD_DIR/temp/classes $BUILD_DIR/temp/classes/FFmpegNative.java
        jar cf $BUILD_DIR/aar/classes.jar -C $BUILD_DIR/temp/classes .
        
        # Create R.txt (empty but required)
        touch $BUILD_DIR/aar/R.txt
        
        # List what we have
        echo "=== AAR Contents ==="
        find $BUILD_DIR/aar -type f -exec ls -la {} \;

    - name: Package AAR
      id: package-aar
      run: |
        echo "=== Packaging AAR ==="
        cd $BUILD_DIR/aar
        
        # Create the AAR file
        AAR_NAME="ffmpeg-android-arm64-$(date +%Y%m%d-%H%M%S).aar"
        zip -r "../$AAR_NAME" . 2>&1 | tee $LOG_DIR/aar-package.log
        
        echo "AAR_NAME=$AAR_NAME" >> $GITHUB_ENV
        echo "AAR_PATH=$BUILD_DIR/$AAR_NAME" >> $GITHUB_ENV
        
        # Verify AAR
        echo "=== AAR Verification ==="
        unzip -l "../$AAR_NAME"
        ls -la "../$AAR_NAME"

    - name: Build Summary and Issue Analysis
      id: build-summary
      run: |
        echo "=== Build Summary ==="
        
        BUILD_SUCCESS=true
        ISSUES_FOUND=""
        
        # Check if AAR was created successfully
        if [ ! -f "$AAR_PATH" ]; then
          BUILD_SUCCESS=false
          ISSUES_FOUND="$ISSUES_FOUND\n- AAR file was not created"
        fi
        
        # Check for libraries in AAR
        if [ -f "$AAR_PATH" ]; then
          LIB_COUNT=$(unzip -l "$AAR_PATH" | grep "jni/arm64-v8a/.*\.a$" | wc -l)
          if [ $LIB_COUNT -eq 0 ]; then
            ISSUES_FOUND="$ISSUES_FOUND\n- No static libraries found in AAR"
          fi
        fi
        
        # Analyze build logs for common issues
        if [ -f "$LOG_DIR/ffmpeg-build.log" ]; then
          if grep -q "error:" "$LOG_DIR/ffmpeg-build.log"; then
            BUILD_SUCCESS=false
            ISSUES_FOUND="$ISSUES_FOUND\n- FFmpeg build errors detected"
            echo "=== FFmpeg Build Errors ==="
            grep "error:" "$LOG_DIR/ffmpeg-build.log" | head -10
          fi
          
          if grep -q "undefined reference" "$LOG_DIR/ffmpeg-build.log"; then
            BUILD_SUCCESS=false
            ISSUES_FOUND="$ISSUES_FOUND\n- Undefined references (linking issues)"
          fi
          
          if grep -q "license" "$LOG_DIR/ffmpeg-build.log"; then
            echo "=== License-related messages found ==="
            grep -i "license" "$LOG_DIR/ffmpeg-build.log"
          fi
        fi
        
        # Create comprehensive summary
        cat > $BUILD_DIR/build-summary.md << 'SUMMARY_EOF'
        # FFmpeg Android Build Summary
        
        **Build Date:** ${{ steps.setup-info.outputs.build-date }}
        **Target Architecture:** ${{ env.TARGET_ARCH }}
        **Android API Level:** ${{ env.ANDROID_API_LEVEL }}
        **FFmpeg Version:** ${{ env.FFMPEG_VERSION }}
        **FFmpeg Commit:** ${{ env.FFMPEG_HASH }}
        **Build Type:** ${{ env.BUILD_TYPE }}
        **Build Status:** SUCCESS_STATUS_PLACEHOLDER
        
        ## External Libraries Built
        - libx264 (H.264 video encoding)
        - libopus (Opus audio codec)
        - libvpx (VP8/VP9 video codecs)
        - libmp3lame (MP3 audio encoding)
        
        ## AAR Information
        - **File:** AAR_NAME_PLACEHOLDER
        - **Size:** AAR_SIZE_PLACEHOLDER
        - **Target ABI:** arm64-v8a only
        
        ## Issues Found
        ISSUES_PLACEHOLDER
        
        ## Build Logs Location
        - Configuration logs: LOG_DIR_PLACEHOLDER/*-configure.log
        - Build logs: LOG_DIR_PLACEHOLDER/*-build.log
        - Install logs: LOG_DIR_PLACEHOLDER/*-install.log
        
        ## Troubleshooting
        TROUBLESHOOTING_PLACEHOLDER
SUMMARY_EOF

        # Replace placeholders with actual values
        sed -i "s/SUCCESS_STATUS_PLACEHOLDER/$([ "$BUILD_SUCCESS" = true ] && echo "✅ SUCCESS" || echo "❌ FAILED")/g" $BUILD_DIR/build-summary.md
        sed -i "s/AAR_NAME_PLACEHOLDER/$AAR_NAME/g" $BUILD_DIR/build-summary.md
        sed -i "s/AAR_SIZE_PLACEHOLDER/$([ -f "$AAR_PATH" ] && ls -lh "$AAR_PATH" | awk '{print $5}' || echo "N/A")/g" $BUILD_DIR/build-summary.md
        sed -i "s|LOG_DIR_PLACEHOLDER|$LOG_DIR|g" $BUILD_DIR/build-summary.md
        
        if [ -n "$ISSUES_FOUND" ]; then
          echo -e "$ISSUES_FOUND" | sed 's/^//' > /tmp/issues.txt
          sed -i "/ISSUES_PLACEHOLDER/r /tmp/issues.txt" $BUILD_DIR/build-summary.md
          sed -i "/ISSUES_PLACEHOLDER/d" $BUILD_DIR/build-summary.md
        else
          sed -i "s/ISSUES_PLACEHOLDER/No issues detected/g" $BUILD_DIR/build-summary.md
        fi
        
        if [ "$BUILD_SUCCESS" = false ]; then
          cat > /tmp/troubleshooting.txt << 'TROUBLE_EOF'
### Common Solutions:
1. Check NDK compatibility with external libraries
2. Verify license compatibility (GPL vs LGPL)
3. Check for missing dependencies or conflicts
4. Review configure flags for target architecture
TROUBLE_EOF
          sed -i "/TROUBLESHOOTING_PLACEHOLDER/r /tmp/troubleshooting.txt" $BUILD_DIR/build-summary.md
          sed -i "/TROUBLESHOOTING_PLACEHOLDER/d" $BUILD_DIR/build-summary.md
        else
          sed -i "/TROUBLESHOOTING_PLACEHOLDER/d" $BUILD_DIR/build-summary.md
        fi
        
        echo "BUILD_SUCCESS=$BUILD_SUCCESS" >> $GITHUB_ENV
        cat $BUILD_DIR/build-summary.md

    - name: Upload AAR Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-android-arm64-aar
        path: |
          ${{ env.AAR_PATH }}
          ${{ env.BUILD_DIR }}/build-summary.md
          ${{ env.LOG_DIR }}/*.log
        retention-days: 30

    - name: Upload Build Logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-build-logs-failed
        path: |
          ${{ env.LOG_DIR }}/*.log
          ${{ env.BUILD_DIR }}/build-summary.md
        retention-days: 7

    - name: Final Status Report
      run: |
        echo "=== Final Build Status ==="
        if [ "$BUILD_SUCCESS" = true ]; then
          echo "✅ Build completed successfully!"
          echo "📦 AAR file: $AAR_NAME"
          echo "🎯 Target: Android ARM64 (arm64-v8a)"
          echo "📏 API Level: ${{ env.ANDROID_API_LEVEL }}"
        else
          echo "❌ Build failed with issues"
          echo "📋 Check the build summary and logs for details"
          exit 1
        fi
